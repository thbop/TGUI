#ifndef TGUI_H
#define TGUI_H

// Includes -------------------------------------------------------------------

// Standard
#include "string.h"

// Raylib
#include "raylib.h"


// Defines --------------------------------------------------------------------
#define TGUI_CHAR_WIDTH   5.0f
#define TGUI_CHAR_HEIGHT  7.0f
#define TGUI_CHAR_SPACING 1.0f

// Raw font.png bytes
const unsigned char TGUI_fontPng[] = {
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 
    0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0xDB, 0x00, 0x00, 0x00, 0x07, 0x08, 0x06, 
    0x00, 0x00, 0x00, 0x40, 0xF1, 0xE7, 0xD4, 0x00, 0x00, 0x03, 0x62, 0x49, 0x44,
    0x41, 0x54, 0x68, 0x81, 0xCD, 0x58, 0xDB, 0x6E, 0x43, 0x31, 0x08, 0x6B, 0xA6,
    0xFD, 0xFF, 0x2F, 0x77, 0x4F, 0x91, 0x90, 0x65, 0x1B, 0xE7, 0x72, 0xDA, 0xF1,
    0x92, 0x85, 0x40, 0x00, 0x73, 0x49, 0xCF, 0xC6, 0xCB, 0xD0, 0xFB, 0xFD, 0x7E,
    0x8F, 0x31, 0x06, 0xEE, 0x2B, 0x9F, 0xF1, 0x98, 0xAE, 0xBA, 0xFF, 0xF5, 0x7A,
    0xBD, 0x12, 0x3D, 0xC6, 0x4F, 0x6C, 0x3C, 0x45, 0x88, 0xC1, 0xE4, 0xBB, 0x58,
    0x50, 0xAE, 0xEE, 0x9D, 0xBE, 0x93, 0xAB, 0x18, 0x2A, 0x39, 0xE6, 0x9F, 0xF2,
    0x79, 0x95, 0x5C, 0x0E, 0x54, 0xCE, 0x12, 0x5F, 0x3A, 0xAC, 0x12, 0x39, 0x26,
    0xE3, 0x88, 0xE9, 0xBB, 0x1C, 0x3A, 0x5D, 0xF4, 0xA1, 0xEA, 0x76, 0x75, 0xEC,
    0xFA, 0xE2, 0x06, 0x2E, 0x2B, 0x72, 0x69, 0x1C, 0x37, 0x78, 0x8E, 0xD2, 0x19,
    0xC1, 0xE2, 0x4B, 0xE6, 0xD0, 0x0D, 0x99, 0x1D, 0x3D, 0x55, 0x13, 0x89, 0x7E,
    0x37, 0x2B, 0x3B, 0x9C, 0xBE, 0x35, 0x3B, 0x13, 0xFA, 0xE6, 0x6C, 0x47, 0x4A,
    0xDF, 0x9E, 0x23, 0x9F, 0xB1, 0x09, 0xE6, 0xBE, 0xF2, 0x19, 0x6F, 0xEE, 0x99,
    0x5C, 0x72, 0xD6, 0xF9, 0x91, 0xF8, 0x98, 0xEA, 0xEF, 0x92, 0x8B, 0x7B, 0xAE,
    0x2E, 0xAE, 0x64, 0xAF, 0x6C, 0x28, 0x1D, 0x76, 0xDE, 0xE5, 0x05, 0xEF, 0x59,
    0xC1, 0x2F, 0xC1, 0xB5, 0xC3, 0xE0, 0x49, 0x9E, 0xC3, 0x2F, 0xE1, 0xED, 0x60,
    0xA5, 0xEC, 0x76, 0xBE, 0x60, 0xDD, 0x7C, 0x1A, 0x2B, 0x17, 0xDB, 0x27, 0xED,
    0x3A, 0x39, 0x27, 0xCF, 0xCE, 0x1D, 0xE6, 0xBB, 0x77, 0xAE, 0x92, 0xD3, 0x73,
    0x78, 0xAB, 0x3A, 0x78, 0xC2, 0xF6, 0x7F, 0xA4, 0xFF, 0xE2, 0xDF, 0x6A, 0x0D,
    0x3A, 0xBF, 0x7F, 0x6E, 0x38, 0xA2, 0xD6, 0xFA, 0xCA, 0xAB, 0x5F, 0x9A, 0xB8,
    0x5F, 0xFD, 0xB5, 0x30, 0x7F, 0xC1, 0x25, 0x0D, 0x7C, 0x8B, 0x94, 0x4F, 0x35,
    0x7E, 0x3C, 0xEF, 0xBE, 0x78, 0xBB, 0x5F, 0xEE, 0xD8, 0x7C, 0x1D, 0x2E, 0xDD,
    0xF9, 0x29, 0xD5, 0xFB, 0x71, 0x38, 0x54, 0xEC, 0xEB, 0xD7, 0x52, 0xF2, 0xF5,
    0x70, 0xE2, 0x13, 0xC3, 0xFC, 0xE4, 0xCE, 0x5B, 0xF8, 0x25, 0xB9, 0x58, 0xF9,
    0x8A, 0x7E, 0x8A, 0x9E, 0xA8, 0x97, 0x9A, 0x83, 0x19, 0x1F, 0xE3, 0x55, 0x9D,
    0xB4, 0xE7, 0x9D, 0xDD, 0x7A, 0x47, 0x22, 0xDF, 0xF5, 0x1B, 0xF2, 0x9D, 0x9C,
    0xD3, 0x53, 0x7E, 0xE0, 0x7C, 0x54, 0xFE, 0x38, 0x1B, 0x1D, 0x5F, 0xC5, 0xBE,
    0x42, 0x6C, 0x0E, 0x75, 0x18, 0xA8, 0xBF, 0x95, 0x3E, 0xAE, 0xCA, 0x8F, 0x24,
    0xBE, 0x2E, 0x7F, 0xCC, 0x07, 0x97, 0xA7, 0x13, 0xFA, 0x5D, 0x11, 0xAE, 0xC5,
    0x3B, 0xD7, 0x59, 0x1C, 0x73, 0xAD, 0xF2, 0xC8, 0xAB, 0x7B, 0xF7, 0x6F, 0x8E,
    0x1D, 0x62, 0x0D, 0x8C, 0x49, 0xAD, 0xBE, 0xA3, 0x9F, 0x2A, 0xD6, 0x94, 0x1C,
    0x0E, 0x4C, 0x8E, 0xF9, 0xAE, 0xF4, 0x19, 0xAE, 0xE8, 0x77, 0x87, 0x33, 0xCA,
    0xA9, 0x62, 0x62, 0xBE, 0x77, 0x79, 0xDD, 0x7D, 0x48, 0x5C, 0xCE, 0x98, 0x7F,
    0x18, 0xC7, 0x4A, 0x43, 0x74, 0x18, 0xB8, 0x47, 0xEE, 0xA4, 0xF1, 0x56, 0x6A,
    0xDC, 0xD5, 0x45, 0x67, 0x03, 0x75, 0x12, 0x39, 0xC5, 0xBB, 0x4D, 0x2C, 0x8E,
    0x74, 0x66, 0x9C, 0xD8, 0x74, 0xFB, 0x15, 0x7D, 0xAC, 0xD1, 0xCA, 0x73, 0xFE,
    0x33, 0xBD, 0xCA, 0x67, 0x67, 0x8C, 0xF0, 0xCE, 0xF9, 0x18, 0xAB, 0xB9, 0xC5,
    0xEA, 0xB7, 0x9B, 0x49, 0x55, 0x17, 0x57, 0x3C, 0x63, 0x7A, 0x8A, 0xA7, 0x62,
    0x75, 0xF3, 0x18, 0x6D, 0x39, 0xFC, 0x5C, 0x9C, 0x2C, 0x16, 0x87, 0x9B, 0xD2,
    0x53, 0xB8, 0x31, 0x52, 0xF6, 0xC6, 0x18, 0x63, 0xE9, 0xB1, 0x65, 0xC1, 0xE1,
    0xAA, 0x0A, 0x21, 0x05, 0xE2, 0xC4, 0x17, 0x75, 0x9F, 0xB2, 0x3D, 0xF7, 0xA7,
    0xCD, 0x9D, 0xFA, 0xEE, 0xE4, 0x2A, 0x66, 0x69, 0x33, 0x26, 0x05, 0xA2, 0xF6,
    0x2B, 0xCD, 0x9F, 0x0E, 0xCA, 0x34, 0x6E, 0xA6, 0x8B, 0x35, 0x93, 0x36, 0x75,
    0x4A, 0xAA, 0xA9, 0x9D, 0xEC, 0x2D, 0xBB, 0x27, 0xB5, 0xAD, 0x86, 0x03, 0xF3,
    0x17, 0x29, 0xC9, 0x5B, 0x97, 0x97, 0x1D, 0xEA, 0x7A, 0x3D, 0xD5, 0xFB, 0x26,
    0x75, 0x03, 0x39, 0x21, 0xD5, 0xD3, 0xF5, 0xAC, 0xEB, 0x83, 0x1D, 0xBB, 0x95,
    0x52, 0x4C, 0x71, 0x76, 0xA2, 0xAE, 0xAB, 0x41, 0xD6, 0xB7, 0x1D, 0x7E, 0x4C,
    0xEE, 0x56, 0xEE, 0xBB, 0xBA, 0x77, 0x3D, 0xC5, 0xE4, 0x56, 0xFC, 0x72, 0xEF,
    0x90, 0xFD, 0x37, 0x72, 0x67, 0xA4, 0x3A, 0x55, 0x57, 0x1C, 0x52, 0x2E, 0x69,
    0x5D, 0x40, 0xDD, 0xB0, 0x61, 0x8F, 0x47, 0xE2, 0xFB, 0x2E, 0xA9, 0x06, 0xD9,
    0xD1, 0x53, 0x05, 0x59, 0xE3, 0x49, 0x86, 0xED, 0x09, 0xED, 0x0E, 0x38, 0x6C,
    0x4A, 0x24, 0x77, 0xBF, 0xCB, 0xF5, 0xE9, 0x60, 0xC1, 0xFD, 0xA7, 0x86, 0xB7,
    0xCB, 0xD1, 0x69, 0x0E, 0x77, 0x63, 0x50, 0x8F, 0xAB, 0x7A, 0x00, 0x76, 0xEE,
    0x9E, 0xF7, 0x60, 0xAF, 0xB3, 0xB3, 0x74, 0xC8, 0xAD, 0xDA, 0xBF, 0x4D, 0x75,
    0xA6, 0xAC, 0x0E, 0x5A, 0x75, 0x36, 0x80, 0xDC, 0x3D, 0x3B, 0x7D, 0xA0, 0x6C,
    0xAF, 0xE0, 0xB4, 0x3B, 0x43, 0x59, 0x5C, 0xAB, 0xB1, 0x2A, 0x3F, 0x59, 0x4F,
    0x4F, 0x3D, 0x56, 0x63, 0x8C, 0xB0, 0x26, 0x95, 0x7F, 0x37, 0xE7, 0x45, 0xAD,
    0xF9, 0xC9, 0xB3, 0x5F, 0xB6, 0x37, 0x06, 0x31, 0x1A, 0x64, 0x8D, 0xC7, 0x86,
    0x02, 0xBB, 0x0F, 0xCF, 0xD3, 0x41, 0xBE, 0x0B, 0x60, 0x12, 0x3F, 0x8B, 0x15,
    0x1F, 0x1B, 0xF6, 0xB7, 0xD2, 0x4D, 0x6D, 0xE0, 0x7D, 0xBB, 0xBA, 0x1D, 0x7E,
    0x3B, 0x79, 0xE9, 0x74, 0xDD, 0x00, 0xEE, 0x9A, 0x46, 0xC5, 0x51, 0xEF, 0x62,
    0xB1, 0x25, 0x03, 0xA7, 0xCB, 0x25, 0xBB, 0x8B, 0x35, 0xBF, 0xAA, 0xC1, 0xD3,
    0x47, 0x2E, 0xF5, 0x8F, 0xF5, 0x16, 0x3B, 0x3F, 0xAD, 0x3F, 0x96, 0x7F, 0x95,
    0xD7, 0x84, 0x1C, 0xD6, 0x49, 0x0F, 0x77, 0xF6, 0x14, 0x56, 0x8C, 0xD7, 0xE5,
    0xDD, 0xF5, 0x60, 0xD7, 0xE7, 0xCA, 0x2E, 0xBB, 0x4F, 0xC5, 0x84, 0x0F, 0x8D,
    0xAB, 0x3F, 0xCC, 0x53, 0xFA, 0x48, 0x21, 0xA5, 0xF5, 0x97, 0x92, 0xC3, 0x44,
    0xF9, 0xCC, 0x6A, 0x9B, 0xD5, 0x23, 0xAE, 0xEC, 0x9C, 0xC5, 0x81, 0xFC, 0x6E,
    0xC6, 0x61, 0x3C, 0x4E, 0xEE, 0x0F, 0xF2, 0x27, 0x36, 0xBA, 0x65, 0xB8, 0x8B,
    0xD4, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82,
};

// State of TGUI
struct {
    Texture font;
} tgui;

// Initialize TGUI
void TGUI_Initialize() {
    // Initialize font
    Image fontImage = LoadImageFromMemory( ".png", TGUI_fontPng, sizeof( TGUI_fontPng ) );
    tgui.font = LoadTextureFromImage( fontImage );
    UnloadImage( fontImage );
}

// Draws a single character
void TGUI_DrawCharacter( char c, Vector2 pos, float size, Color color ) {
    DrawTexturePro(
        tgui.font,
        (Rectangle){ (c-32)*TGUI_CHAR_WIDTH, 0.0f, TGUI_CHAR_WIDTH, TGUI_CHAR_HEIGHT },
        (Rectangle){ pos.x, pos.y, TGUI_CHAR_WIDTH * size, TGUI_CHAR_HEIGHT * size },
        (Vector2){0}, 0.0f, color
    );
}

// Draws a string
void TGUI_DrawText( const char *str, Vector2 pos, float size, Color color ) {
    int length = strlen( str );
    for ( int i = 0; i < length; i++ ) {
        TGUI_DrawCharacter(
            str[i],
            (Vector2){ pos.x+i*(TGUI_CHAR_WIDTH+TGUI_CHAR_SPACING)*size, pos.y },
            size, color
        );
    }
}

// Unload TGUI
void TGUI_Unload() {

    UnloadTexture( tgui.font );
}

#endif